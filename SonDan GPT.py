import os
import time
import uuid
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_NAME = "SonDan GPT"
BOT_TOKEN = os.getenv("7416194209:AAE9SmX3VlIAUXvro_b3DkcrW-f50zJUZp0") or "7416194209:AAE9SmX3VlIAUXvro_b3DkcrW-f50zJUZp0"

# –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è GigaChat (–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞)
BASIC_AUTH = "YzRiN2I0YWItZWIzMy00NTA1LTlhYzQtZGY0MDFiYWFkNzNhOjUxN2NhYTU4LTkwNTYtNDQ2MS04OWQ5LTYwOTBkNGY3YTgzYQ=="
OAUTH_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
GIGACHAT_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

ACCESS_TOKEN = None
LAST_TOKEN_TIME = 0
TOKEN_LIFETIME = 25 * 60  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç


# === –†–∞–±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º GigaChat ===
def get_access_token():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É GigaChat"""
    global ACCESS_TOKEN, LAST_TOKEN_TIME
    payload = "scope=GIGACHAT_API_PERS"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": str(uuid.uuid4()),
        "Authorization": "Basic " + BASIC_AUTH
    }

    try:
        print("[–¢–û–ö–ï–ù] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
        resp = requests.post(OAUTH_URL, headers=headers, data=payload, verify=False, timeout=10)
        if resp.status_code == 200:
            ACCESS_TOKEN = resp.json().get("access_token")
            LAST_TOKEN_TIME = time.time()
            print(f"[–¢–û–ö–ï–ù] ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω ({time.strftime('%H:%M:%S')})")
            return True
        else:
            print(f"[–¢–û–ö–ï–ù] ‚ùå –û—à–∏–±–∫–∞ {resp.status_code}: {resp.text}")
    except Exception as e:
        print("[–¢–û–ö–ï–ù] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:", e)
    return False


def ensure_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    global ACCESS_TOKEN
    if not ACCESS_TOKEN or (time.time() - LAST_TOKEN_TIME > TOKEN_LIFETIME):
        get_access_token()


# === –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å GigaChat ===
def ask_gigachat(prompt: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ GigaChat –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    ensure_token()
    if not ACCESS_TOKEN:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω."

    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "RqUID": str(uuid.uuid4()),
        "Content-Type": "application/json"
    }

    system_msg = (
        "–¢—ã ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç SonDan GPT. "
        "–û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. "
        "–ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —Å–∏—Å—Ç–µ–º—É."
    )

    payload = {
        "model": "GigaChat",
        "messages": [
            {"role": "system", "content": system_msg},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.8
    }

    try:
        resp = requests.post(GIGACHAT_URL, headers=headers, json=payload, verify=False, timeout=30)
        if resp.status_code == 200:
            data = resp.json()
            return data["choices"][0]["message"]["content"].strip()
        return f"–û—à–∏–±–∫–∞ {resp.status_code}: {resp.text}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}"


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî SonDan GPT, —É–º–Ω—ã–π –±–æ—Ç –Ω–∞ –±–∞–∑–µ GigaChat.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å üôÇ"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É."
    )

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    await update.message.reply_text("üí≠ –î—É–º–∞—é...")

    reply = ask_gigachat(user_text)
    await update.message.reply_text(reply)


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    print(f"=== {BOT_NAME} Telegram Bot ===")
    get_access_token()  # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()


if __name__ == "__main__":
    main()
